---
export const prerender = false;

import { getCollection, type CollectionEntry, render } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import { Icon } from "astro-icon/components";
import { Client } from "@notionhq/client";

// Handle form submission
if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();

    // Extract form data
    const formData: Record<string, any> = {};
    for (const [key, value] of data.entries()) {
      if (formData[key]) {
        // Handle multiple values (like multiselect checkboxes)
        if (Array.isArray(formData[key])) {
          formData[key].push(value.toString());
        } else {
          formData[key] = [formData[key], value.toString()];
        }
      } else {
        formData[key] = value.toString();
      }
    }

    const position = formData.position;
    const subteam = formData.subteam;

    // Initialize Notion client
    const notion = new Client({
      auth: import.meta.env.NOTION_TOKEN,
    });

    // Create entry in Notion database
    const notionResponse = await notion.pages.create({
      parent: {
        database_id: import.meta.env.NOTION_DATABASE_ID,
      },
      properties: {
        Name: {
          title: [
            {
              text: {
                content: formData.full_name || "Unknown",
              },
            },
          ],
        },
        Email: {
          email: formData.email_address || "",
        },
        Position: {
          select: {
            name: position || "Unknown",
          },
        },
        Subteam: {
          select: {
            name: subteam || "Unknown",
          },
        },
        "Student ID": {
          rich_text: [
            {
              text: {
                content: formData.university_of_waterloo_student_id || "",
              },
            },
          ],
        },
        Program: {
          rich_text: [
            {
              text: {
                content: formData.program_and_year_of_study || "",
              },
            },
          ],
        },
        Phone: {
          phone_number: formData.phone_number || null,
        },
        "Application Date": {
          date: {
            start: new Date().toISOString().split("T")[0],
          },
        },
        Status: {
          select: {
            name: "New Application",
          },
        },
      },
    });

    // Prepare Discord message
    const discordWebhookUrl = import.meta.env.DISCORD_WEBHOOK_URL;

    // Format all form responses for Discord
    let formResponses = "";
    for (const [key, value] of Object.entries(formData)) {
      if (key !== "position" && key !== "subteam") {
        const formattedKey = key
          .replace(/_/g, " ")
          .replace(/\b\w/g, (l) => l.toUpperCase());
        const formattedValue = Array.isArray(value) ? value.join(", ") : value;
        formResponses += `**${formattedKey}:** ${formattedValue}\n`;
      }
    }

    const payload = JSON.stringify({
      embeds: [
        {
          title: "ðŸŽ¯ New Job Application",
          color: 0x3498db,
          fields: [
            {
              name: "Position",
              value: position,
              inline: true,
            },
            {
              name: "Subteam",
              value: subteam,
              inline: true,
            },
            {
              name: "Applicant Details",
              value: formResponses,
              inline: false,
            },
          ],
          footer: {
            text: `Notion Page ID: ${notionResponse.id}`,
          },
          timestamp: new Date().toISOString(),
        },
      ],
    });

    const response = await fetch(discordWebhookUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: payload,
    });

    if (response.ok) {
      // Redirect to success page
      return Astro.redirect("/jobs/success");
    }
  } catch (error) {
    console.error("Error submitting application:", error);
    // You could redirect to an error page or handle the error differently
    // For now, we'll let the page render normally with the form
  }
}

export async function getStaticPaths() {
  const jobs = await getCollection("jobs");
  return jobs.map((job) => ({
    params: { slug: job.id },
    props: { job },
  }));
}

interface Props {
  job: CollectionEntry<"jobs">;
}

const { job } = Astro.props;
const { Content } = await render(job);

// Shared application questions across all jobs
const sharedQuestions = [
  {
    question: "Full Name",
    type: "text" as const,
    required: true,
  },
  {
    question: "Email Address",
    type: "text" as const,
    required: true,
  },
  {
    question: "University of Waterloo Student ID",
    type: "text" as const,
    required: true,
  },
  {
    question: "Program and Year of Study",
    type: "text" as const,
    required: true,
  },
  {
    question: "Phone Number",
    type: "text" as const,
    required: false,
  },
  {
    question: "Why are you interested in joining Formula Nano?",
    type: "textarea" as const,
    required: true,
  },
  {
    question: "What do you hope to gain from this experience?",
    type: "textarea" as const,
    required: true,
  },
  {
    question: "Upload your resume (Google Drive link)",
    type: "text" as const,
    required: true,
  },
];
---

<Layout title={`${job.data.title} | Jobs | Formula Nano`}>
  <main>
    <div class="mx-auto max-w-4xl">
      <!-- Back button -->
      <a
        href="/jobs"
        class="mb-6 inline-flex items-center text-blue-600 hover:text-blue-800"
      >
        <Icon name="ph:arrow-left" class="mr-2 h-5 w-5" />
        Back to Join Page
      </a>

      <!-- Job header -->
      <div class="mb-8 rounded-xl bg-gray-50 p-8">
        <div class="mb-4 flex items-start justify-between">
          <div>
            <h1 class="mb-2 text-4xl font-bold text-gray-900">
              {job.data.title}
            </h1>
            <div class="flex items-center gap-4 text-lg text-gray-600">
              <span
                class="rounded-full bg-blue-100 px-3 py-1 font-medium text-blue-800"
              >
                {job.data.subteam}
              </span>
              <span>{job.data.time_commitment}</span>
            </div>
          </div>
          {
            job.data.application_deadline && (
              <div class="text-right">
                <p class="text-sm text-gray-500">Application Deadline</p>
                <p class="text-lg font-semibold text-red-600">
                  {job.data.application_deadline.toLocaleDateString()}
                </p>
              </div>
            )
          }
        </div>
        <p class="text-xl text-gray-700">{job.data.description}</p>
      </div>

      <!-- Requirements -->
      <div class="mb-8 grid gap-8 md:grid-cols-2">
        <div>
          <h2 class="mb-4 text-2xl font-bold text-gray-900">Requirements</h2>
          <ul class="space-y-2">
            {
              job.data.requirements.map((req: string) => (
                <li class="flex items-start">
                  <Icon
                    name="ph:check-circle"
                    class="mr-3 mt-0.5 h-5 w-5 flex-shrink-0 text-green-600"
                  />
                  <span class="text-gray-700">{req}</span>
                </li>
              ))
            }
          </ul>
        </div>

        {
          job.data.preferred_qualifications &&
            job.data.preferred_qualifications.length > 0 && (
              <div>
                <h2 class="mb-4 text-2xl font-bold text-gray-900">
                  Preferred Qualifications
                </h2>
                <ul class="space-y-2">
                  {job.data.preferred_qualifications.map((qual) => (
                    <li class="flex items-start">
                      <Icon
                        name="ph:star"
                        class="mr-3 mt-0.5 h-5 w-5 flex-shrink-0 text-yellow-500"
                      />
                      <span class="text-gray-700">{qual}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )
        }
      </div>

      <!-- Job description content -->
      <div class="prose prose-lg mb-12 max-w-none">
        <Content />
      </div>

      <!-- Application form -->
      <div class="rounded-xl border border-gray-200 bg-white p-8">
        <h2 class="mb-6 text-3xl font-bold text-gray-900">
          Apply for this Position
        </h2>

        <form class="space-y-6" method="POST">
          <input type="hidden" name="position" value={job.data.title} />
          <input type="hidden" name="subteam" value={job.data.subteam} />

          <!-- Shared questions -->
          {
            sharedQuestions.map((question) => (
              <div>
                <label class="mb-2 block text-sm font-medium text-gray-700">
                  {question.question}
                  {question.required && (
                    <span class="ml-1 text-red-500">*</span>
                  )}
                </label>

                {question.type === "textarea" ? (
                  <textarea
                    name={question.question.toLowerCase().replace(/\s+/g, "_")}
                    required={question.required}
                    rows={4}
                    class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                  />
                ) : (
                  <input
                    type={question.type === "text" ? "text" : question.type}
                    name={question.question.toLowerCase().replace(/\s+/g, "_")}
                    required={question.required}
                    class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                  />
                )}
              </div>
            ))
          }

          <!-- Position-specific questions -->
          {
            job.data.specific_questions.length > 0 && (
              <>
                <hr class="my-8" />
                <h3 class="mb-4 text-xl font-semibold text-gray-900">
                  Position-Specific Questions
                </h3>

                {job.data.specific_questions.map((question) => (
                  <div>
                    <label class="mb-2 block text-sm font-medium text-gray-700">
                      {question.question}
                      {question.required && (
                        <span class="ml-1 text-red-500">*</span>
                      )}
                    </label>

                    {question.type === "textarea" ? (
                      <textarea
                        name={question.question
                          .toLowerCase()
                          .replace(/\s+/g, "_")}
                        required={question.required}
                        rows={4}
                        class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                    ) : question.type === "select" ? (
                      <select
                        name={question.question
                          .toLowerCase()
                          .replace(/\s+/g, "_")}
                        required={question.required}
                        class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      >
                        <option value="">Select an option...</option>
                        {question.options?.map((option) => (
                          <option value={option}>{option}</option>
                        ))}
                      </select>
                    ) : question.type === "multiselect" ? (
                      <div class="space-y-2">
                        {question.options?.map((option) => (
                          <label class="flex items-center">
                            <input
                              type="checkbox"
                              name={question.question
                                .toLowerCase()
                                .replace(/\s+/g, "_")}
                              value={option}
                              class="mr-2 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                            />
                            {option}
                          </label>
                        ))}
                      </div>
                    ) : (
                      <input
                        type="text"
                        name={question.question
                          .toLowerCase()
                          .replace(/\s+/g, "_")}
                        required={question.required}
                        class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                    )}
                  </div>
                ))}
              </>
            )
          }

          <div class="pt-6">
            <button
              type="submit"
              class="w-full rounded-lg bg-blue-600 px-6 py-3 font-medium text-white transition-colors hover:bg-blue-700"
            >
              Submit Application
            </button>
          </div>
        </form>
      </div>
    </div>
  </main>
</Layout>
